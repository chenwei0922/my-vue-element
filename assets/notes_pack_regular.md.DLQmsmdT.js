import{_ as s,o as a,c as i,af as n}from"./chunks/framework.BQjydDc4.js";const g=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"notes/pack/regular.md","filePath":"notes/pack/regular.md","lastUpdated":1715246384000}'),e={name:"notes/pack/regular.md"},l=n('<h1 id="正则表达式" tabindex="-1"><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html" target="_blank" rel="noreferrer">正则表达式</a> <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;[正则表达式](https://www.runoob.com/jsref/jsref-obj-regexp.html)&quot;">​</a></h1><h2 id="示例使用" tabindex="-1">示例使用 <a class="header-anchor" href="#示例使用" aria-label="Permalink to &quot;示例使用&quot;">​</a></h2><h3 id="匹配两个字符之间的内容" tabindex="-1">匹配两个字符之间的内容 <a class="header-anchor" href="#匹配两个字符之间的内容" aria-label="Permalink to &quot;匹配两个字符之间的内容&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//比如字符串为 `[pre]法法撒旦发[/pre]`</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//`(?&lt;=\\[pre\\]).*?(?=\\[/pre\\])` 这个结果就是`法法撒旦发`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[pre]123[/pre]456[pre]789[/pre][pre][/pre]&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?&lt;=</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">pre</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\[\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">pre</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[&#39;123&#39;, &#39;789&#39;, &#39;&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="大小字母、数字、特殊字符-至少8位" tabindex="-1">大小字母、数字、特殊字符, 至少8位 <a class="header-anchor" href="#大小字母、数字、特殊字符-至少8位" aria-label="Permalink to &quot;大小字母、数字、特殊字符, 至少8位&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^(?![A-Za-z0-9]+$)(?![a-z0-9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">W]+$)(?![A-Za-z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">W]+$)(?![A-Z0-9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">W]+$)[a-zA-Z0-9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">W]{8,20}$&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="符号介绍" tabindex="-1">符号介绍 <a class="header-anchor" href="#符号介绍" aria-label="Permalink to &quot;符号介绍&quot;">​</a></h2><h3 id="捕获分组" tabindex="-1"><code>()</code> 捕获分组 <a class="header-anchor" href="#捕获分组" aria-label="Permalink to &quot;`()` 捕获分组&quot;">​</a></h3><blockquote><p><code>()</code>会把每个分组匹配的值保存起来。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123abc456ww&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//result: [</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;123abc456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123abc456ww&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  groups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="非捕获分组" tabindex="-1"><code>(?:)</code> 非捕获分组 <a class="header-anchor" href="#非捕获分组" aria-label="Permalink to &quot;`(?:)` 非捕获分组&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const reg = new RegExp(/(?:[0-9]*)([a-z]*)([0-9]*)/i)</span></span>\n<span class="line"><span>const str = &#39;123abc456ww&#39;</span></span>\n<span class="line"><span>const result = str.match(reg)</span></span>\n<span class="line"><span>//result: [</span></span>\n<span class="line"><span>  &#39;123abc456&#39;,</span></span>\n<span class="line"><span>  &#39;abc&#39;,</span></span>\n<span class="line"><span>  &#39;456&#39;,</span></span>\n<span class="line"><span>  index: 0,</span></span>\n<span class="line"><span>  input: &#39;123abc456ww&#39;,</span></span>\n<span class="line"><span>  groups: undefined</span></span>\n<span class="line"><span>]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="pattern-正向肯定预查" tabindex="-1"><code>(?=pattern)</code> 正向肯定预查 <a class="header-anchor" href="#pattern-正向肯定预查" aria-label="Permalink to &quot;`(?=pattern)` 正向肯定预查&quot;">​</a></h3><blockquote><p>捕获以pattern结尾的内容。非获取匹配。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">windows(?=95</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">98)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;windows95&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result: [ &#39;windows&#39;, index: 0, input: &#39;windows95&#39;, groups: undefined ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="pattern-正向否定预查" tabindex="-1"><code>(?!pattern)</code> 正向否定预查 <a class="header-anchor" href="#pattern-正向否定预查" aria-label="Permalink to &quot;`(?!pattern)` 正向否定预查&quot;">​</a></h3><blockquote><p>捕获不以pattern结尾的内容，非获取匹配。</p></blockquote><h3 id="pattern-反向肯定预查" tabindex="-1"><code>(?&lt;=pattern)</code> 反向肯定预查 <a class="header-anchor" href="#pattern-反向肯定预查" aria-label="Permalink to &quot;`(?&lt;=pattern)` 反向肯定预查&quot;">​</a></h3><blockquote><p>反向肯定预查，与正向肯定预查类似，只是方向相反。以(?&lt;=pattern)xxx为例，就是捕获以pattern开头的内容xxx。</p></blockquote><h3 id="a-b-查找任何指定的选项" tabindex="-1"><code>(a|b)</code> 查找任何指定的选项 <a class="header-anchor" href="#a-b-查找任何指定的选项" aria-label="Permalink to &quot;`(a|b)` 查找任何指定的选项&quot;">​</a></h3><h3 id="查找方括号之间的任何字符" tabindex="-1"><code>[]</code> 查找方括号之间的任何字符 <a class="header-anchor" href="#查找方括号之间的任何字符" aria-label="Permalink to &quot;`[]` 查找方括号之间的任何字符&quot;">​</a></h3><h3 id="查找任何不在方括号之间的字符" tabindex="-1"><code>[^]</code> 查找任何不在方括号之间的字符 <a class="header-anchor" href="#查找任何不在方括号之间的字符" aria-label="Permalink to &quot;`[^]` 查找任何不在方括号之间的字符&quot;">​</a></h3><h3 id="查找单个字符-除换行和行结束符" tabindex="-1"><code>.</code> 查找单个字符，除换行和行结束符 <a class="header-anchor" href="#查找单个字符-除换行和行结束符" aria-label="Permalink to &quot;`.` 查找单个字符，除换行和行结束符&quot;">​</a></h3><h3 id="w-数字、字母以及下划线" tabindex="-1"><code>\\w</code> 数字、字母以及下划线 <a class="header-anchor" href="#w-数字、字母以及下划线" aria-label="Permalink to &quot;`\\w` 数字、字母以及下划线&quot;">​</a></h3><h3 id="w-查找非单词字符" tabindex="-1"><code>\\W</code> 查找非单词字符 <a class="header-anchor" href="#w-查找非单词字符" aria-label="Permalink to &quot;`\\W` 查找非单词字符&quot;">​</a></h3><h3 id="d-数字" tabindex="-1"><code>\\d</code> 数字 <a class="header-anchor" href="#d-数字" aria-label="Permalink to &quot;`\\d` 数字&quot;">​</a></h3><h3 id="d-非数字字符" tabindex="-1"><code>\\D</code> 非数字字符 <a class="header-anchor" href="#d-非数字字符" aria-label="Permalink to &quot;`\\D` 非数字字符&quot;">​</a></h3><h3 id="s-空白字符" tabindex="-1"><code>\\s</code> 空白字符 <a class="header-anchor" href="#s-空白字符" aria-label="Permalink to &quot;`\\s` 空白字符&quot;">​</a></h3><h3 id="s-非空白字符" tabindex="-1"><code>\\S</code> 非空白字符 <a class="header-anchor" href="#s-非空白字符" aria-label="Permalink to &quot;`\\S` 非空白字符&quot;">​</a></h3><h3 id="量词-至少一个" tabindex="-1"><code>+</code> 量词，至少一个 <a class="header-anchor" href="#量词-至少一个" aria-label="Permalink to &quot;`+` 量词，至少一个&quot;">​</a></h3><h3 id="量词-零个或多个" tabindex="-1"><code>*</code> 量词，零个或多个 <a class="header-anchor" href="#量词-零个或多个" aria-label="Permalink to &quot;`*` 量词，零个或多个&quot;">​</a></h3><h3 id="量词-零个或一个" tabindex="-1"><code>?</code> 量词，零个或一个 <a class="header-anchor" href="#量词-零个或一个" aria-label="Permalink to &quot;`?` 量词，零个或一个&quot;">​</a></h3><h3 id="量词-结尾" tabindex="-1"><code>$</code> 量词，结尾 <a class="header-anchor" href="#量词-结尾" aria-label="Permalink to &quot;`$` 量词，结尾&quot;">​</a></h3><h3 id="量词-开头" tabindex="-1"><code>^</code> 量词，开头 <a class="header-anchor" href="#量词-开头" aria-label="Permalink to &quot;`^` 量词，开头&quot;">​</a></h3>',34),h=[l];function t(p,r,k,d,o,c){return a(),i("div",null,h)}const F=s(e,[["render",t]]);export{g as __pageData,F as default};
